/**
 * @file   {{basename}}
 * @author {{appname}}
 * @date   {{date}}
 * @brief  SSC EtherCAT Definitions
 *
 *         Automatically generated by {{appname}}
 *         All edits will be destroyed
 */

#ifndef _ECATDEF_H_
#define _ECATDEF_H_

#include <stdlib.h>
#include <string.h>

extern const unsigned char esc_eeprom[];

/*-----------------------------------------------------------------------------------------
------	
------	Application Specific Defines
------	
-----------------------------------------------------------------------------------------*/

#define MAX_DIAG_MSG                              {{MAX_DIAG_MSG}}
#define MAX_EMERGENCIES                           {{MAX_EMERGENCIES}}
#define MAX_FILE_SIZE                             {{MAX_FILE_SIZE}}
#define VENDOR_ID                                 {{VENDOR_ID}}
#define PRODUCT_CODE                              {{PRODUCT_CODE}}
#define REVISION_NUMBER                           {{REVISION_NUMBER}}
#define SERIAL_NUMBER                             {{SERIAL_NUMBER}}
#define DEVICE_PROFILE_TYPE                       {{DEVICE_PROFILE_TYPE}}
#define DEVICE_NAME                               "{{DEVICE_NAME}}"
#define DEVICE_NAME_LEN                           {{DEVICE_NAME_LEN}}
#define DEVICE_HW_VERSION                         "{{DEVICE_HW_VERSION}}"
#define DEVICE_HW_VERSION_LEN                     {{DEVICE_HW_VERSION_LEN}}
#define DEVICE_SW_VERSION                         "{{DEVICE_SW_VERSION}}"
#define DEVICE_SW_VERSION_LEN                     {{DEVICE_SW_VERSION_LEN}}
#define MIN_PD_WRITE_ADDRESS                      {{MIN_PD_WRITE_ADDRESS}}
#define MAX_PD_WRITE_ADDRESS                      {{MAX_PD_WRITE_ADDRESS}}
#define MIN_PD_READ_ADDRESS                       {{MIN_PD_READ_ADDRESS}}
#define MAX_PD_READ_ADDRESS                       {{MAX_PD_READ_ADDRESS}}
#define MIN_MBX_SIZE                              {{MIN_MBX_SIZE}}
#define MAX_MBX_SIZE                              {{MAX_MBX_SIZE}}
#define MIN_MBX_WRITE_ADDRESS                     {{MIN_MBX_WRITE_ADDRESS}}
#define MAX_MBX_WRITE_ADDRESS                     {{MAX_MBX_WRITE_ADDRESS}}
#define MAX_PD_INPUT_SIZE                         {{MAX_PD_INPUT_SIZE}}
#define MIN_MBX_READ_ADDRESS                      {{MIN_MBX_READ_ADDRESS}}
#define MAX_MBX_READ_ADDRESS                      {{MAX_MBX_READ_ADDRESS}}
#define MAX_PD_OUTPUT_SIZE                        {{MAX_PD_OUTPUT_SIZE}}
#define MIN_PD_CYCLE_TIME                         {{MIN_PD_CYCLE_TIME}}
#define MAX_PD_CYCLE_TIME                         {{MAX_PD_CYCLE_TIME}}
#define PD_OUTPUT_DELAY_TIME                      {{PD_OUTPUT_DELAY_TIME}}
#define PD_OUTPUT_CALC_AND_COPY_TIME              {{PD_OUTPUT_CALC_AND_COPY_TIME}}
#define PD_INPUT_CALC_AND_COPY_TIME               {{PD_INPUT_CALC_AND_COPY_TIME}}
#define PD_INPUT_DELAY_TIME                       {{PD_INPUT_DELAY_TIME}}

#define EL9800_HW                                 {{EL9800_HW}}
#define MCI_HW                                    {{MCI_HW}}
#define FC1100_HW                                 {{FC1100_HW}}
#define TIESC_HW                                  {{TIESC_HW}}
#define CONTROLLER_16BIT                          {{CONTROLLER_16BIT}}
#define CONTROLLER_32BIT                          {{CONTROLLER_32BIT}}
#define _PIC18                                    {{_PIC18}}
#define _PIC24                                    {{_PIC24}}
#define ESC_16BIT_ACCESS                          {{ESC_16BIT_ACCESS}}
#define ESC_32BIT_ACCESS                          {{ESC_32BIT_ACCESS}}
#define MBX_16BIT_ACCESS                          {{MBX_16BIT_ACCESS}}
#define BIG_ENDIAN_16BIT                          {{BIG_ENDIAN_16BIT}}
#define BIG_ENDIAN_FORMAT                         {{BIG_ENDIAN_FORMAT}}
#define EXT_DEBUGER_INTERFACE                     {{EXT_DEBUGER_INTERFACE}}
#define UC_SET_ECAT_LED                           {{UC_SET_ECAT_LED}}
#define ESC_SUPPORT_ECAT_LED                      {{ESC_SUPPORT_ECAT_LED}}
#define ESC_EEPROM_EMULATION                      {{ESC_EEPROM_EMULATION}}
#define ESC_EEPROM_SIZE                           {{ESC_EEPROM_SIZE}}
#define EEPROM_READ_SIZE                          {{EEPROM_READ_SIZE}}
#define EEPROM_WRITE_SIZE                         {{EEPROM_WRITE_SIZE}}
#define AL_EVENT_ENABLED                          {{AL_EVENT_ENABLED}}
#define DC_SUPPORTED                              {{DC_SUPPORTED}}
#define ECAT_TIMER_INT                            {{ECAT_TIMER_INT}}
#define INTERRUPTS_SUPPORTED                      {{INTERRUPTS_SUPPORTED}}
#define TEST_APPLICATION                          {{TEST_APPLICATION}}
#define EL9800_APPLICATION                        {{EL9800_APPLICATION}}
#define CiA402_DEVICE                             {{CiA402_DEVICE}}
#define SAMPLE_APPLICATION                        {{SAMPLE_APPLICATION}}
#define SAMPLE_APPLICATION_INTERFACE              {{SAMPLE_APPLICATION_INTERFACE}}
#define TIESC_APPLICATION                         {{TIESC_APPLICATION}}
#define USE_DEFAULT_MAIN                          {{USE_DEFAULT_MAIN}}
#define MAILBOX_QUEUE                             {{MAILBOX_QUEUE}}
#define AOE_SUPPORTED                             {{AOE_SUPPORTED}}
#define COE_SUPPORTED                             {{COE_SUPPORTED}}
#define COMPLETE_ACCESS_SUPPORTED                 {{COMPLETE_ACCESS_SUPPORTED}}
#define SEGMENTED_SDO_SUPPORTED                   {{SEGMENTED_SDO_SUPPORTED}}
#define SDO_RES_INTERFACE                         {{SDO_RES_INTERFACE}}
#define USE_SINGLE_PDO_MAPPING_ENTRY_DESCR        {{USE_SINGLE_PDO_MAPPING_ENTRY_DESCR}}
#define BACKUP_PARAMETER_SUPPORTED                {{BACKUP_PARAMETER_SUPPORTED}}
#define STORE_BACKUP_PARAMETER_IMMEDIATELY        {{STORE_BACKUP_PARAMETER_IMMEDIATELY}}
#define DIAGNOSIS_SUPPORTED                       {{DIAGNOSIS_SUPPORTED}}
#define EMERGENCY_SUPPORTED                       {{EMERGENCY_SUPPORTED}}
#define VOE_SUPPORTED                             {{VOE_SUPPORTED}}
#define SOE_SUPPORTED                             {{SOE_SUPPORTED}}
#define EOE_SUPPORTED                             {{EOE_SUPPORTED}}
#define STATIC_ETHERNET_BUFFER                    {{STATIC_ETHERNET_BUFFER}}
#define FOE_SUPPORTED                             {{FOE_SUPPORTED}}
#define FOE_SAVE_FILES                            {{FOE_SAVE_FILES}}
#define MAILBOX_SUPPORTED                         {{MAILBOX_SUPPORTED}}
#define BOOTSTRAPMODE_SUPPORTED                   {{BOOTSTRAPMODE_SUPPORTED}}
#define OP_PD_REQUIRED                            {{OP_PD_REQUIRED}}
#define PREOPTIMEOUT                              {{PREOPTIMEOUT}}
#define SAFEOP2OPTIMEOUT                          {{SAFEOP2OPTIMEOUT}}
#define EXPLICIT_DEVICE_ID                        {{EXPLICIT_DEVICE_ID}}
#define ESC_SM_WD_SUPPORTED                       {{ESC_SM_WD_SUPPORTED}}
#define STATIC_OBJECT_DIC                         {{STATIC_OBJECT_DIC}}
#define ESC_EEPROM_ACCESS_SUPPORT                 {{ESC_EEPROM_ACCESS_SUPPORT}}

/*-----------------------------------------------------------------------------------------
------	
------	Compiler Defines
------	
-----------------------------------------------------------------------------------------*/

/** 
FALSE: Will be used for variables from type BOOL */
#define FALSE                                     0

/** 
TRUE: Will be used for variables from type BOOL  */
#define TRUE                                      1

/** 
BOOL: Should be adapted to the boolean type of the microcontroller */
#define BOOL                                      unsigned char

/** 
UINT8: Should be adapted to the unsigned8 type of the microcontroller  */
#define UINT8                                     unsigned char

/** 
UINT16: Should be adapted to the unsigned16 type of the microcontroller  */
#define UINT16                                    unsigned short

/** 
UINT32: Should be adapted to the unsigned32 type of the microcontroller  */
#define UINT32                                    unsigned long

/** 
USHORT: Should be adapted to the unsigned16 type of the microcontroller */
#define USHORT                                    unsigned short

/** 
INT8: Should be adapted to the integer8 type of the microcontroller */
#define INT8                                      char

/** 
INT16: Should be adapted to the integer16 type of the microcontroller  */
#define INT16                                     short

/** 
INT32: Should be adapted to the integer32 type of the microcontroller */
#define INT32                                     long

/** 
CHAR: Should be adapted to the character type of the microcontroller */
#define CHAR                                      char

/** 
UCHAR: Should be adapted to the unsigned character type of the microcontroller */
#define UCHAR                                     unsigned char

/** 
SIZEOF(x): Used to calculate the size in Bytes */
#define SIZEOF(x)                                 sizeof(x)

/** 
HUGE: Should be adapted to the huge type of the microcontroller, if the microcontroller<br>
does not support a huge type, HUGE shall be defined to nothing */
#define HUGE 

/** 
HMEMSET: Should be defined to the memset function for huge memory, if the microcontroller<br>
does not support a huge type, HMEMSET shall be defined to a 'normal' memset function */
#define HMEMSET                                   memset

/** 
HMEMCPY: Should be defined to the memcpy function for huge memory, if the microcontroller<br>
does not support a huge type, HMEMCPY shall be defined to a 'normal' memcpy function */
#define HMEMCPY                                   memcpy

/** 
HMEMCMP: Should be defined to the memcmp function for huge memory, if the microcontroller<br>
does not support a huge type, HMEMCMP shall be defined to a 'normal' memcmp function */
#define HMEMCMP                                   memcmp

/** 
ESCMEM: Should be defined to select the memory type of the ESC memory (e.g. near, far or huge), if the microcontroller<br>
does not support different memory types, ESCMEM shall be defined to nothing */
#define ESCMEM 

/** 
ESCMEMCPY: Should be defined to the memcpy function for ESCMEM memory, if the microcontroller<br>
does not support different memory types, ESCMEMCPY shall be defined to a 'normal' memcpy function */
#define ESCMEMCPY                                 memcpy

/** 
ESCMEMSET: Should be defined to the memset function for ESCMEM memory, if the microcontroller<br>
does not support different memory types, ESCMEMSET shall be defined to a 'normal' memset function */
#define ESCMEMSET                                 memset

/** 
ESCMBXMEMCPY: Should be defined to the memcpy function for copying ESCMEM memory to or from MBXMEM memory, if the microcontroller<br>
does not support different memory types, ESCMBXMEMCPY shall be defined to a 'normal' memcpy function */
#define ESCMBXMEMCPY                              memcpy

/** 
MBXMEM: Should be defined to select the memory type of the memory used for mailbox communication (e.g. near, far or huge), <br>
if the microcontroller does not support different memory types, MBXMEM shall be defined to nothing */
#define MBXMEM 

/** 
MBXMEMCPY: Should be defined to the memcpy function for MBXMEM memory, if the microcontroller<br>
does not support different memory types, MBXMEMCPY shall be defined to a 'normal' memcpy function */
#define MBXMEMCPY                                 memcpy

/** 
MBXMEMCMP: Should be defined to the memcmp function for MBXMEM memory, if the microcontroller<br>
does not support different memory types, MBXMEMCMP shall be defined to a 'normal' memcmp function */
#define MBXMEMCMP                                 memcmp

/** 
MBXMEMSET: Should be defined to the memcpy function for MBXMEM memory, if the microcontroller<br>
does not support different memory types, MBXMEMSET shall be defined to a 'normal' memset function */
#define MBXMEMSET                                 memset

/** 
MBXSTRLEN: Should be defined to the strlen function for MBXMEM memory, if the microcontroller<br>
does not support different memory types, MBXSTRLEN shall be defined to a 'normal' strlen function */
#define MBXSTRLEN                                 strlen

/** 
MBXSTRCPY: Should be defined to the strcpy function for MBXMEM memory, if the microcontroller<br>
does not support different memory types, MBXSTRCPY shall be defined to a 'normal' strcpy function */
#define MBXSTRCPY                                 memcpy

/** 
OBJCONST: Should be used to define the object dictionary in ROM (f.e. define OBJCONST const) or<br>
in RAM (e.g. define OBJCONST) */
#define OBJCONST                                  const

/** 
VARCONST: Should be used to define the constant variables in ROM (f.e. define VARCONST const) or<br>
in RAM (e.g. define VARCONST) */
#define VARCONST 

/** 
VARVOLATILE: Should be used to prevent dummy variables to be deleted due to compiler optimization.  */
#define VARVOLATILE                               volatile

/** 
OBJMEM: Should be defined to select the memory type of the memory used for the object dictionary (e.g. near, far or huge), <br>
if the microcontroller does not support different memory types, OBJMEM shall be defined to nothing */
#define OBJMEM 

/** 
OBJTOMBXMEMCPY: Should be defined to the memcpy function for copying OBJMEM memory to MBXMEM memory, if the microcontroller<br>
does not support different memory types, OBJTOMBXMEMCPY shall be defined to a 'normal' memcpy function */
#define OBJTOMBXMEMCPY                            memcpy

/** 
OBJTOMBXSTRCPY: Should be defined to the strcpy function for copying OBJMEM memory to MBXMEM memory, if the microcontroller<br>
does not support different memory types, OBJTOMBXSTRCPY shall be defined to a 'normal' memcpy function */
#define OBJTOMBXSTRCPY                            memcpy

/** 
OBJMEMCPY: Should be defined to the memcpy function for OBJMEM memory, if the microcontroller<br>
does not support different memory types, OBJMEMCPY shall be defined to a 'normal' memcpy function */
#define OBJMEMCPY                                 memcpy

/** 
OBJSTRLEN: Should be defined to the strlen function for OBJMEM memory, if the microcontroller<br>
does not support different memory types, OBJSTRLEN shall be defined to a 'normal' strlen function */
#define OBJSTRLEN                                 strlen

/** 
OBJSTRCPY: Should be defined to the strcpy function for OBJMEM memory, if the microcontroller<br>
does not support different memory types, OBJSTRCPY shall be defined to a 'normal' strcpy function */
#define OBJSTRCPY                                 memcpy

/** 
MAKE_HUGE_PTR: Should be defined to the initialize a pointer variable with an absolute address */
#if !_PIC24
#define MAKE_HUGE_PTR                             _mkhp
#else
#define MAKE_HUGE_PTR 
#endif

/** 
MAKE_PTR_TO_ESC: Should be defined to the initialize the pointer to the ESC */
#if MCI_HW && !FC1100_HW
#define MAKE_PTR_TO_ESC                           &sEsc
#else
#define MAKE_PTR_TO_ESC 
#endif

/** 
EMCYMEMCPY: Should be defined to the memcpy function for EMCYMEM memory, if the microcontroller<br>
does not support different memory types, EMCYMEMCPY shall be defined to a 'normal' memcpy function */
#define EMCYMEMCPY                                memcpy

/** 
EMCYMEMSET: Should be defined to the memset function for EMCYMEM memory, if the microcontroller<br>
does not support different memory types, EMCYMEMSET shall be defined to a 'normal' memcset function */
#define EMCYMEMSET                                memset

/** 
EMCYMEM: Should be defined to select the memory type of the memory used for the emergencies (e.g. near, far or huge), <br>
if the microcontroller does not support different memory types, EMCYMEM shall be defined to nothing */
#define EMCYMEM 

/** 
MEMCPY: Should be defined to copy data within local memory. */
#define MEMCPY                                    memcpy

/** 
ALLOCMEM(size): Should be defined to the alloc function to get dynamic memory */
#define ALLOCMEM(size)                            malloc((size))

/** 
FREEMEM(pointer): Should be defined to the free function to put back dynamic memory */
#define FREEMEM(pointer)                          free((pointer))

/** 
VARMEMSET: Should be defined to the memset function for VARMEM memory, if the microcontroller<br>
does not support different memory types, EMCYMEMSET shall be defined to a 'normal' memcset function */
#define VARMEMSET                                 memset

/** 
VARMEM: Should be defined to select the memory type of the memory used for dynamic memory (e.g. near, far or huge), <br>
if the microcontroller does not support different memory types, VARMEM shall be defined to nothing */
#define VARMEM 

/** 
MEM_ADDR: Type to access local memory addresses */
#if CONTROLLER_32BIT
#define MEM_ADDR                                  UINT32
#elif CONTROLLER_16BIT
#define MEM_ADDR                                  UINT16
#else
#define MEM_ADDR                                  UINT8
#endif

/** 
GET_MEM_SIZE(ByteSize): Round up the byte size to next matching memory boundary depending on "MEM_ADDR" */
#if CONTROLLER_32BIT
#define GET_MEM_SIZE(ByteSize)                    (((ByteSize)+3) >> 2)
#elif CONTROLLER_16BIT
#define GET_MEM_SIZE(ByteSize)                    (((ByteSize)+1) >> 1)
#else
#define GET_MEM_SIZE(ByteSize)                    (ByteSize)
#endif

/** 
APPL_AllocMailboxBuffer(size): Should be defined to a function to get a buffer for a mailbox service,<br>
this is only used if the switch MAILBOX_QUEUE is set */
#if MAILBOX_QUEUE
#define APPL_AllocMailboxBuffer(size)             malloc((size))
#else
#define APPL_AllocMailboxBuffer(size) 
#endif

/** 
APPL_FreeMailboxBuffer(pointer): Should be defined to a function to put back a buffer for a mailbox service,<br>
this is only used if the switch MAILBOX_QUEUE is set */
#if MAILBOX_QUEUE
#define APPL_FreeMailboxBuffer(pointer)           free((pointer))
#else
#define APPL_FreeMailboxBuffer(pointer) 
#endif

/** 
STRUCT_PACKED_START: Is defined before the typedef struct construct to pack the generic structures if necessary */
#define STRUCT_PACKED_START 

/** 
STRUCT_PACKED_END: Is defined after the typedef struct {} construct to pack the generic structures if necessary */
#define STRUCT_PACKED_END __attribute__((packed))

/** 
MBX_STRUCT_PACKED_START: Is defined before the typedef struct construct to pack the MAILBOX structures if necessary */
#define MBX_STRUCT_PACKED_START 

/** 
MBX_STRUCT_PACKED_END: Is defined after the typedef struct {} construct to pack the MAILBOX structures if necessary */
#define MBX_STRUCT_PACKED_END __attribute__((packed)) 

/** 
OBJ_STRUCT_PACKED_START: Is defined before the typedef struct construct to pack the OBJECT structures if necessary */
#define OBJ_STRUCT_PACKED_START 

/** 
OBJ_STRUCT_PACKED_END: Is defined after the typedef struct {} construct to pack the OBJECT structures if necessary */
#define OBJ_STRUCT_PACKED_END __attribute__((packed))  

/** 
OBJ_DWORD_ALIGN: Shall be set if the object structures are not Byte aligned and the Code is executed on an 32bit platform */
#if CONTROLLER_32BIT
#define OBJ_DWORD_ALIGN                           1
#else
#define OBJ_DWORD_ALIGN                           0
#endif

/** 
OBJ_WORD_ALIGN: Shall be set if the object structures are not Byte aligned and the Code is executed on an 16bit platform */
#if CONTROLLER_16BIT
#define OBJ_WORD_ALIGN                            1
#else
#define OBJ_WORD_ALIGN                            0
#endif

/*-----------------------------------------------------------------------------------------
------	
------	Test Configuration Defines
------	
-----------------------------------------------------------------------------------------*/

#if EL9800_HW && !_PIC24 && !_PIC18
#warning EL9800_HW is enabled and no PIC is selected => the SPI connector TP204/J204 shall be used to connect to host controller. If the onboard MCI connector (TP208/J208) is required enable MCI_HW
#endif

#if FC1100_HW && AL_EVENT_ENABLED
#error The FC1100_HW configuration does not support PDI interrupt by default
#endif

#if _PIC18 && _PIC24
#error Select only one PIC
#endif

#if _PIC18 && !STATIC_OBJECT_DIC
#error The PIC18 configuration requires a static object dictionary
#endif

#if _PIC18 && !EL9800_HW
#error EL9800_HW shall be enabled if PIC18 is set (confiuration for EL9800_2)
#endif

#if _PIC24 && !EL9800_HW
#error EL9800_HW shall be enabled if PIC24 is set (confiuration for EL9800_4)
#endif

#if EXT_DEBUGER_INTERFACE && !_PIC24
#warning The define "EXT_DEBUGER_INTERFACE" is only required for EL9800 PIC24 platforms
#endif

#if ECAT_TIMER_INT && _PIC18
#error The PIC18 configuration does not support timer interrupts by default
#endif

#if DC_SUPPORTED && (_PIC18 || FC1100_HW)
#error The configuration for "FC1100_HW" and "_PIC18" does not support DC synchronisation by default
#endif

#if UC_SET_ECAT_LED && _PIC18
#error The PIC18 platform (EL9800_2) does not support status LEDs
#endif

#if SEGMENTED_SDO_SUPPORTED && _PIC18
#error The PIC18 configuration does not support segmented SDO
#endif

#if MAILBOX_QUEUE && _PIC18
#error The PIC18 configuration does not support mailbox queue
#endif

#if EL9800_APPLICATION && !EL9800_HW
#error EL9800_HW shall be enabled if EL9800_Application is set
#endif

#if (EL9800_APPLICATION + CiA402_DEVICE  + TEST_APPLICATION + SAMPLE_APPLICATION + SAMPLE_APPLICATION_INTERFACE)  > 1
#error Select only one application.
#endif

#if TEST_APPLICATION
#warning Use this application ONLY FOR TESTING PURPOSE.
#endif

#if VOE_SUPPORTED
#warning VoE mailbox functions and structs need to be implemented and defined
#endif

#if BOOTSTRAPMODE_SUPPORTED && !FOE_SUPPORTED
#error FoE shall be enabled, if Bootstrap state is supported 
#endif

#if AOE_SUPPORTED && !MAILBOX_QUEUE
#error AoE requires mailbox queue support
#endif

#if DIAGNOSIS_SUPPORTED && _PIC18
#error PIC18 configuration does not support diagnosis messages
#endif

#if DIAGNOSIS_SUPPORTED &&  !COE_SUPPORTED
#error Diagnosis history requires CoE support
#endif

#if EMERGENCY_SUPPORTED && !COE_SUPPORTED && !SOE_SUPPORTED
#error CoE or SoE shall be enabled if Emergency support is set
#endif

#if FOE_SAVE_FILES && !FOE_SUPPORTED
#error FoE shall be enabled if FoE save files is set
#endif

#if CiA402_DEVICE && !COE_SUPPORTED
#error CoE shall be enabled if CiA402Device set
#endif

#if COMPLETE_ACCESS_SUPPORTED && !COE_SUPPORTED
#error CoE shall be enabled if complete access is set
#endif

#if SEGMENTED_SDO_SUPPORTED && !COE_SUPPORTED
#error CoE shall be enabled if segmented SDO access is set
#endif

#if SDO_RES_INTERFACE && !COE_SUPPORTED
#error CoE shall be enabled if SDO response interface is set
#endif

#if BACKUP_PARAMETER_SUPPORTED && !COE_SUPPORTED
#error CoE shall be enabled if Backup Parameter is set
#endif

#if DIAGNOSIS_SUPPORTED && !COE_SUPPORTED
#error CoE shall be enabled if diagnosis history (0x10F3) is set
#endif

#if MAILBOX_QUEUE && !MAILBOX_SUPPORTED
#error Disable mailbox queue if if no mailbox protocol is supported.
#endif

#if (EL9800_HW && (MCI_HW || FC1100_HW)) || (MCI_HW && (EL9800_HW || FC1100_HW)) || (FC1100_HW && (EL9800_HW || MCI_HW))
#error Select only one PDI / platform. See setting description for detailed information.
#endif

#if DIAGNOSIS_SUPPORTED && STATIC_OBJECT_DIC
#error If Diagnosis History is enabled the object dictionary shall handled dynamically.
#endif

#if CiA402_DEVICE && SOE_SUPPORTED
#error Select only one drive profile.
#endif

#if CONTROLLER_16BIT && CONTROLLER_32BIT
#error Select only one controller architecture.
#endif

#if ESC_16BIT_ACCESS && ESC_32BIT_ACCESS
#error Select only one ESC access width.
#endif

#if UC_SET_ECAT_LED && ESC_SUPPORT_ECAT_LED
#error Either the uController OR the ESC shall set the EtherCAT LEDs. Disable "UC_SET_ECAT_LED" or "ESC_SUPPORT_ECAT_LED"
#endif

#if STATIC_OBJECT_DIC && !EL9800_APPLICATION
#error The static object dictionary is only available for the EL9800_APPLICATION. 
#endif

#endif // _ECATDEF_H_
